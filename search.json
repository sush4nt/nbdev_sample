[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_sample",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_sample",
    "section": "Install",
    "text": "Install\npip install nbdev_sample"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_sample",
    "section": "How to use",
    "text": "How to use\nThis is a test library which provides a Card class to create, display and compare different cards\n\nCard(suit=1,rank=4)\n\nCard is 4 of D\n\n\n\nsuits\n\n['C', 'D', 'H', 'S']\n\n\n\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n\n\n\nDeck()\n\nCard is A of C; \nCard is 2 of C; \nCard is 3 of C; \nCard is 4 of C; \nCard is 5 of C; \nCard is 6 of C; \nCard is 7 of C; \nCard is 8 of C; \nCard is 9 of C; \nCard is 10 of C; \nCard is J of C; \nCard is Q of C; \nCard is K of C; \nCard is A of D; \nCard is 2 of D; \nCard is 3 of D; \nCard is 4 of D; \nCard is 5 of D; \nCard is 6 of D; \nCard is 7 of D; \nCard is 8 of D; \nCard is 9 of D; \nCard is 10 of D; \nCard is J of D; \nCard is Q of D; \nCard is K of D; \nCard is A of H; \nCard is 2 of H; \nCard is 3 of H; \nCard is 4 of H; \nCard is 5 of H; \nCard is 6 of H; \nCard is 7 of H; \nCard is 8 of H; \nCard is 9 of H; \nCard is 10 of H; \nCard is J of H; \nCard is Q of H; \nCard is K of H; \nCard is A of S; \nCard is 2 of S; \nCard is 3 of S; \nCard is 4 of S; \nCard is 5 of S; \nCard is 6 of S; \nCard is 7 of S; \nCard is 8 of S; \nCard is 9 of S; \nCard is 10 of S; \nCard is J of S; \nCard is Q of S; \nCard is K of S\n\n\n\ndeck = Deck()\ndeck.pop()\n\nCard is K of S"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card - a playing card",
    "section": "",
    "text": "Using letters to represent Suits and Ranks\nNote that there isnt a playing card at position 0, since we want the ranks to match the indices where possible"
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card - a playing card",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\nCheck if the Card is equal, less than, greater than\n\n# test_eq?\n\n\ntest_eq\n\n<function fastcore.test.test_eq(a, b)>\n\n\n\ntest_eq(Card(suit=1, rank=4), Card(suit=1, rank=4))\n\n\ntest_ne(Card(suit=1, rank=6), Card(suit=1, rank=8))\n\nif you want add a functionality somewhere after defining the class:\n\nassert Card(suit=1, rank=4) < Card(suit=1, rank=7)\nassert Card(suit=2, rank=8) > Card(suit=1, rank=7)"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck - a deck of cards",
    "section": "",
    "text": "Deck()\n\nCard is A of C; \nCard is 2 of C; \nCard is 3 of C; \nCard is 4 of C; \nCard is 5 of C; \nCard is 6 of C; \nCard is 7 of C; \nCard is 8 of C; \nCard is 9 of C; \nCard is 10 of C; \nCard is J of C; \nCard is Q of C; \nCard is K of C; \nCard is A of D; \nCard is 2 of D; \nCard is 3 of D; \nCard is 4 of D; \nCard is 5 of D; \nCard is 6 of D; \nCard is 7 of D; \nCard is 8 of D; \nCard is 9 of D; \nCard is 10 of D; \nCard is J of D; \nCard is Q of D; \nCard is K of D; \nCard is A of H; \nCard is 2 of H; \nCard is 3 of H; \nCard is 4 of H; \nCard is 5 of H; \nCard is 6 of H; \nCard is 7 of H; \nCard is 8 of H; \nCard is 9 of H; \nCard is 10 of H; \nCard is J of H; \nCard is Q of H; \nCard is K of H; \nCard is A of S; \nCard is 2 of S; \nCard is 3 of S; \nCard is 4 of S; \nCard is 5 of S; \nCard is 6 of S; \nCard is 7 of S; \nCard is 8 of S; \nCard is 9 of S; \nCard is 10 of S; \nCard is J of S; \nCard is Q of S; \nCard is K of S\n\n\n\nsource\n\nDeck\n\n Deck ()\n\nA class representing a deck of cards\n\ndeck = Deck()\n\n\ndeck\n\nCard is A of C; \nCard is 2 of C; \nCard is 3 of C; \nCard is 4 of C; \nCard is 5 of C; \nCard is 6 of C; \nCard is 7 of C; \nCard is 8 of C; \nCard is 9 of C; \nCard is 10 of C; \nCard is J of C; \nCard is Q of C; \nCard is K of C; \nCard is A of D; \nCard is 2 of D; \nCard is 3 of D; \nCard is 4 of D; \nCard is 5 of D; \nCard is 6 of D; \nCard is 7 of D; \nCard is 8 of D; \nCard is 9 of D; \nCard is 10 of D; \nCard is J of D; \nCard is Q of D; \nCard is K of D; \nCard is A of H; \nCard is 2 of H; \nCard is 3 of H; \nCard is 4 of H; \nCard is 5 of H; \nCard is 6 of H; \nCard is 7 of H; \nCard is 8 of H; \nCard is 9 of H; \nCard is 10 of H; \nCard is J of H; \nCard is Q of H; \nCard is K of H; \nCard is A of S; \nCard is 2 of S; \nCard is 3 of S; \nCard is 4 of S; \nCard is 5 of S; \nCard is 6 of S; \nCard is 7 of S; \nCard is 8 of S; \nCard is 9 of S; \nCard is 10 of S; \nCard is J of S; \nCard is Q of S; \nCard is K of S\n\n\n\nlen(deck)\n\n52\n\n\n\ntest_eq(len(deck), 52)\n\nThese are the suits available in the Card\n\nsuits\n\n['C', 'D', 'H', 'S']\n\n\nCheck if a Card is in the Deck or not\n\nCard(1,1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove the card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove from the deck, by default it pops the last one\n\n\n\nPopping a card from the deck\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3,13))\n\n\nlen(deck)\n\n51"
  }
]